import cv2
import numpy as np
image = cv2.imread('Rock20240125/new/20240707-1.png', cv2.IMREAD_GRAYSCALE) 
blur = cv2.blur(image, (10, 10))  
# Calculate the threshold of the local region (adaptive binarization)
block_size = 25  
constant = 10  
adaptive_threshold = cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, block_size, constant)
_, global_threshold = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
# Merge local binarization results and global binarization results
binary = cv2.bitwise_and(adaptive_threshold, global_threshold)
cv2.imshow('Binary Image0', blur)
cv2.imshow('Binary Image', binary)
cv2.waitKey(0)
cv2.destroyAllWindows()
cv2.namedWindow('Binary Image', cv2.WINDOW_NORMAL)  
# cv2.resizeWindow('Binary Image0', 800, 600)  
# cv2.resizeWindow('Binary Image', 800, 600)  
def BGR2GRAY(img):
    b = img[:, :, 0].copy()
    g = img[:, :, 1].copy()
    r = img[:, :, 2].copy()
    # Gray scale
    out = 0.2126 * r + 0.7152 * g + 0.0722 * b
    out = out.astype(np.uint8)
    return out
image10 = cv2.imread('Rock20240125/TP1.png').astype(np.float32)
image11 = cv2.medianBlur(image10,5)
out = BGR2GRAY(image11)
image20 = cv2.imread("Rock20240125/TP1.png", cv2.IMREAD_GRAYSCALE)  
out1 = cv2.medianBlur(image20, 7)
image30 = cv2.imread('Rock20240125/new/20240707-1.png')
image31 = cv2.medianBlur(image30, 3)
out2 = cv2.cvtColor(image31, cv2.COLOR_BGR2GRAY)  
cv2.namedWindow('Binary1 Image', cv2.WINDOW_NORMAL)
cv2.resizeWindow('Binary1 Image', 800, 800)

def on_scrollbar_change(pos):
    pass
cv2.createTrackbar('Position', 'Binary1 Image', 0, 255, on_scrollbar_change)

while True:
     pos = cv2.getTrackbarPos('Position', 'Binary1 Image')
  _, binary1 = cv2.threshold(out2, pos, 255, cv2.THRESH_BINARY)      
    cv2.imshow('Binary1 Image', binary1)
        if cv2.waitKey(1) == 27:
        break
cv2.destroyAllWindows()

